name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: build
      run: pip install .
    - name: test import
      run: python -c "import pysindy"

  docs:
    name: Docs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: "Set up Python"
      uses: actions/setup-python@v4
      with:
          python-version: "3.10"
    - name: Install doc dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install pandoc
        sudo apt-get update -y
        pip install -e .[docs,cvxpy,miosr,sbr]
    - name: Build docs
      run: |
        cd docs
        python -m sphinx -T -E -W -b html -d _build/doctrees . _build/html

  tests:
    name: Tests
    needs: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.9", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install .[dev,miosr,cvxpy,sbr]
    - name: Test with pytest
      run: |
        coverage run --source=pysindy -m pytest test -m "not slow"  && coverage xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

  benchmarks:
    name: ASV Benchmarks
    needs: tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ matrix.poetry-version }}
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      # ======
      # Load cached venv if cache exists
      # Install dependencies if cache does not exist
      # ======
      - name: Load cached venv
        id: cached-poetry-dependencies-dev
        uses: actions/cache@v4
        with:
          path: .venv
          key: dev-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies-dev.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E dev
      # ======
      # Compare benchmarks between master and PR, and fail if any get worse
      # ======

      - name: Setup ASV
        run: |
          pip install asv
          cd asv_bench
          asv machine --yes
      - name: Check regression
        run: |
          cd asv_bench
          git fetch origin $GITHUB_BASE_REF:base $GITHUB_REF:pr
          asv continuous base pr -e
